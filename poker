#include <stdio.h>
#include <stdlib.h>
#include <time.h>

	enum enumsuit {hearts, Diamonds, Clubs, Spades};
	enum enumface {Ace, Deuce, Three, Four, Five, Six, Seven,
		Eight, Nine, Ten, Jack, Queen, King, Ace_};
	typedef enum enumsuit enumsuit;
	typedef enum enumface enumface;

	struct card
	{
		enumsuit suit;
		enumface face;
	};
	
	struct playercard //player 패
	{
		int playersuit[7];
		int playerface[7];
		int scoresuit;
		int scoreface;
	};

	typedef struct card card;
	typedef struct playercard playercard;


	char *strface[] = {"Ace", "Deuce", "Three", "Four", "Five", "Six",
		"Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace"};
	char *strsuit[] = {"Hearts", "Diamonds", "Clubs", "Spades"};

	void filldeck(card *deck);
	void shuffle(card *deck);
	void deal(card *deck, playercard *card, int cnt);
	void viewcard(playercard *card,int cnt);

	int straight_flush(playercard * card, int playerN);
	int fourcard(playercard * card, int playerN);
	int fullhouse(playercard *card, int playerN);
	int flush(playercard *card,int playerN);
	int straight(playercard *card, int playerN);
	int triple(playercard * card, int playerN);
	int two_pair(playercard * card, int playerN);
	int one_pair(playercard * card, int playerN);
	int top(playercard * card, int playerN);

	void checkscore(playercard *card, int playerN,int cnt);

int main()
{
	card deck[52];
	playercard card[4];
	int cnt; // 사람 총수
	int playerN = 0; // 사람
	filldeck(deck);
	shuffle(deck);
	printf("♠ ");
	printf("카드 모양의 우선순위 없고 \n1,2,3,4,5 스트레이트는 5스트레이트로 가장 낮은 스트레이트다.\n\n");
	printf("카드 게임에 몇 사람이 참가합니까? >> ");
	scanf("%d", &cnt);
	
	printf("\n");
	deal(deck, card, cnt);

	viewcard(card, cnt);
	checkscore(card, playerN, cnt);

}

void filldeck(card *deck) //덱 초기화
{
	int i;
	for (i=0; i<=51; i++)
	{
		deck[i].face = i%13;
		deck[i].suit = i/13;
	}
}

void shuffle(card *deck) //덱 섞기
{
	int i,j;
	card temp;
	srand( time(NULL));
	for(i=0; i<=51; i++)
	{
		j = rand()%52;
		temp = deck[i];
		deck[i] = deck[j];
		deck[j] = temp;
	}
}

void deal(card *deck, playercard *card, int cnt) //패 나눠주기
{
	int i,j,n=0;
	for(i=0; i<7; i++)
	{
		for(j=0; j<cnt; j++)
		{
			card[j].playerface[i] = deck[n].face;
			card[j].playersuit[i] = deck[n].suit;
			n++;
		}
	}
}

void viewcard(playercard *card, int cnt) //각각 패 출력
{
	int i,j;
	for(i=0;i<cnt;i++)
	{
		printf("사람 [%d]           ",i+1);
	}
	printf("\n");
	{
		for(i=0; i<7; i++)
		{
			for(j=0; j<cnt; j++)
			{
				printf("%-5s",strface[card[j].playerface[i]]);
				printf(" of ");
				printf("%-10s",strsuit[card[j].playersuit[i]]);
				printf("");
			}
			printf("\n");
		}
	}
}

// card_score

int straight_flush(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	int straightcount=0;
	int flush_ok=0;
	for(i=0; i<7; i++) //패의 숫자 확인
	{
		face[card[playerN].playerface[i]]++;
	}
	for(i=0;i<13;i++)
	{
		if(face[i]>1) // 한 숫자의 패가 2개 이상 있으면 하나처럼 생각
		{
			face[i]=1;
		}
	}
	face[13]=face[0];
	for(i=0; i<10; i++) // 스트레이트 5장을 확인하기 위해서 루프를 4번 덜 돌림.
	{
		if(face[13-i]>0); // 큰 숫자부터 확인 14-i
		{
			straightcount += face[13-i];
			straightcount += face[12-i];
			straightcount += face[11-i];
			straightcount += face[10-i];
			straightcount += face[9-i];
			if(card[playerN].playersuit[13-i]==card[playerN].playersuit[12-i] && 
				card[playerN].playersuit[12-i]==card[playerN].playersuit[11-i] &&
				card[playerN].playersuit[11-i]==card[playerN].playersuit[10-i] &&
				card[playerN].playersuit[10-i]==card[playerN].playersuit[9-i])
			{
				flush_ok=1;
			}
		}
		if(straightcount==5 && flush_ok==1)
		{
			card[playerN].scoreface=13-i;
			printf("[%s][%s] Straight Flush",strsuit[13-i],strface[13-i]);
			return 1;
		}
		straightcount=0;
	}
	return 0;
}

int fourcard(playercard *card, int playerN)
{
	int face[13] = {0,};
	int i;
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	for(i=0; i<13; i++)
	{
		if(face[i]==4)
		{
			card[playerN].scoreface=i;
			printf("[%s] Fourcard",strface[i]);
			return 1;
		}
	}
	return 0;
}

int fullhouse(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	int threecount = 0;
	int first = 0, second = 0;
	
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	face[13]=face[0];
	for(i=0; i<13; i++) // 일반적인 3,2 풀하우스가 아닌 3,3풀하우스 확인
	{
		if(face[13-i]==3)
		{
			threecount++;
		}
	}
	for(i=0; i<13; i++) //3,3 풀하우스 일때 패의 숫자를 반환하기 위함.
	{
		if(face[13-i]==3)
		{
			first=13-i;
			break;
		}
	}

	if(threecount==2) //3,3 풀하우스
	{
		for(i=0;i<13;i++)
		{
			if(face[13-i]==3)
			{
				printf("[%s]",strface[13-i]);
			}
			printf(" Fullhouse");
			card[playerN].scoreface=first;
			return 1;
		}
	}
	else // 3,2 풀하우스
	{
		for(i=0; i<13; i++)
		{
			if(face[13-i]==3) 
			{
				first = 13-i;
			
			}
			if(face[13-i]==2)
			{
				second = 13-i;
			
			}
			if(first!=0 && second!=0)
			{
				printf("[%s][%s] Fullhouse",strface[first],strface[second]);
				card[playerN].scoreface=first;
				return 1;
			}
		}
	}
	return 0;
}

int flush(playercard *card,int playerN)
{
	int suit[4] = {0,}; // 모양 4장
	int i;
	for(i=0; i<7; i++) //패의 모양 확인
	{
		suit[card[playerN].playersuit[i]]++;
	}
	for(i=0; i<4; i++)
	{
		if(suit[i]>=5) //같은 모양 5개 이상 확인
		{
			printf("[%s] Flush", strsuit[i]);
			card[playerN].scoreface=0; // 숫자 반환 필요 없음.
			return 1;
		}
	}
	return 0;
}

int straight(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	int straightcount=0;
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	for(i=0;i<13;i++)
	{
		if(face[i]>1) // 한 숫자의 패가 2개 이상 있으면 하나처럼 생각
		{
			face[i]=1;
		}
	}
	face[13]=face[0];
	for(i=0; i<10; i++)
	{
		if(face[14-i]>0); // 큰 숫자부터 확인 13-i
		{
			straightcount += face[13-i];
			straightcount += face[12-i];
			straightcount += face[11-i];
			straightcount += face[10-i];
			straightcount += face[9-i];
		}
		if(straightcount==5)
		{
			printf("[%s] Straight",strface[13-i]);
			card[playerN].scoreface=13-i;
			return 1;
		}
		straightcount=0;
	}
	return 0;
}

int triple(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	face[13]=face[0];
	for(i=0; i<13; i++)
	{
		if(face[13-i]==3)
		{
			printf("[%s] Triple",strface[13-i]);
			card[playerN].scoreface=13-i;
			return 1;
		}
	}
	return 0;
}

int two_pair(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	int firstpair=0;
	int paircount=0;
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	face[13]=face[0];
	for(i=0; i<13; i++)
	{
		if(face[13-i]==2)
		{
			printf("[%s]",strface[13-i]);
			paircount++;
			if(paircount==1)
			{
				firstpair=13-i;
			}
			if(paircount==2)
			{
				printf(" Two Pair");
				card[playerN].scoreface = firstpair;
				return 1;
			}
		}
	}
	return 0;
}

int one_pair(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	face[13]=face[0];
	for(i=0; i<13; i++)
	{
		if(face[13-i]==2)
		{
			printf(" One Pair");
			card[playerN].scoreface = 13-i;
			return 1;
		}
	}
	return 0;
}

int top(playercard *card, int playerN)
{
	int face[14] = {0,};
	int i;
	for(i=0; i<7; i++)
	{
		face[card[playerN].playerface[i]]++;
	}
	face[13]=face[0];
	for(i=0; i<13; i++)
	{
		if(face[13-i]>0)
		{
				printf("[%s] Top",strface[13-i]);
				card[playerN].scoreface = 13-i;
				break;
		}
	}
	return 1;
}

void checkscore(playercard *card, int playerN, int cnt)
{
	int score[4]; // 실점수
	int samescore[4]; // 실점수의 패의 숫자
	int highscore=10; // 높은 점수를 찾기 위한 변수
	int samecard=0; // 높은 점수의 갯수.
	int win; // 이긴 사람 
	int i;
	for(playerN=0; playerN<cnt; playerN++) //패 출력
	{	
		printf("\n[%d] Player : ",playerN+1);
		if(straight_flush(card,playerN)){score[playerN]=1;}
		else if(fourcard(card,playerN)){score[playerN]=2;}
		else if(fullhouse(card,playerN)){score[playerN]=3;}
		else if(flush(card,playerN)){score[playerN]=4;}
		else if(straight(card,playerN)){score[playerN]=5;}
		else if(triple(card,playerN)){score[playerN]=6;}
		else if(two_pair(card,playerN)){score[playerN]=7;}
		else if(one_pair(card,playerN)){score[playerN]=8;}
		else if(top(card,playerN)){score[playerN]=9;}
		printf("\n");
	}

	printf("------------------------------------\n");

	for(i=0; i<4; i++) //가장 높은 점수
	{
		if(highscore>score[i])
		{
			win = i;
			highscore=score[i];
		}
	}

	for(i=0; i<4; i++)
	{
		if(highscore==score[i])
		{
			samecard++;
		}
	}
	
	if(samecard==1) //같은 순위의 패가 없을 경우
	{
		printf("[%d] Player is winner",win+1);
	}

	else
	{
		for(i=0; i<4; i++)
		{
			if(highscore==score[i])
			{
				samescore[i] = card[i].scoreface;
			}
			else
			{
				samescore[i] = -1;
			}
		}

		highscore=0; //변수 재활용

		for(i=0; i<4; i++) //높은 패 개수 세기
		{
			if(highscore<samescore[i])
			{
				highscore=samescore[i];
			}
		}
		samecard=0;

		for(i=0; i<4; i++)
		{
			if(highscore==samescore[i])
			{	
				win = i;
				samecard++;
			}
		}

		if(samecard==1)
		{
			printf("[%d] Player is winner",win+1);
		}
		
		else
		{
			for(i=0; i<4; i++)
			{
				if(highscore==samescore[i])
				{
					printf("[%d] Player",i+1);
				}
			}
			printf(" is draw");
		}
	}
}
